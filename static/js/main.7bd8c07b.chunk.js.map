{"version":3,"sources":["components/algorithms/MergeSortAlgo.js","components/Sortingvisualizer.js","App.js","serviceWorker.js","index.js"],"names":["GetAnimationArray","array","animationArray","MergeSortAlgo","startInd","endInd","mid","Math","floor","i","j","left","right","k","push","Merge","length","Sortingvisualizer","props","state","array_length","this","resetArray","min","max","random","setState","e","console","log","target","value","height_of_bar","window","innerHeight","arrayBars","document","getElementsByClassName","barone","bartwo","setTimeout","style","backgroundColor","height","width_of_bar","innerWidth","className","minHeight","map","idx","key","width","onSubmit","event","setArrayLen","type","placeholder","onClick","MergeSort","QuickSort","HeapSort","BubbleSort","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2SAOe,SAASA,EAAkBC,GACtC,IAAMC,EAAiB,GAMvB,OAGJ,SAASC,EAAcD,EAAeD,EAAMG,EAASC,GACjD,GAAGA,GAAQD,EAAY,OACvB,IAAME,EAAKC,KAAKC,OAAOH,EAAOD,GAAU,GAAGA,EAC3CD,EAAcD,EAAeD,EAAMG,EAASE,GAC5CH,EAAcD,EAAeD,EAAMK,EAAI,EAAED,GAK7C,SAAeH,EAAeD,EAAMG,EAASE,EAAID,GAC7C,IAAII,EAAEL,EACFM,EAAEJ,EAAI,EACJK,EAAO,GACPC,EAAQ,GACVC,EAAE,EACN,IAAIA,EAAET,EAASS,GAAGP,EAAIO,IAElBF,EAAKG,KAAKb,EAAMY,IAEpB,IAAIA,EAAEP,EAAI,EAAEO,GAAGR,EAAOQ,IAClBD,EAAME,KAAKb,EAAMY,IAGrBA,EAAET,EACF,KAAMK,GAAKH,GAAOI,GAAKL,GAEhBM,EAAKF,EAAEL,IAAaQ,EAAMF,EAAEJ,EAAI,IAC/BJ,EAAeY,KAAK,CAACL,EAAEC,IACvBR,EAAeY,KAAK,CAACL,EAAEC,IACvBR,EAAeY,KAAK,CAACD,EAAEF,EAAKF,EAAEL,KAC9BH,EAAMY,KAAKF,EAAKF,EAAEL,GAClBK,MAGAP,EAAeY,KAAK,CAACL,EAAEC,IACvBR,EAAeY,KAAK,CAACL,EAAEC,IACvBR,EAAeY,KAAK,CAACD,EAAED,EAAMF,EAAEJ,EAAI,KACnCL,EAAMY,KAAKD,EAAMF,EAAEJ,EAAI,GACvBI,KAGR,KAAMD,GAAGH,GACLJ,EAAeY,KAAK,CAACL,EAAEA,IACvBP,EAAeY,KAAK,CAACL,EAAEA,IAEvBP,EAAeY,KAAK,CAACD,EAAEF,EAAKF,EAAEL,KAC9BH,EAAMY,KAAKF,EAAKF,EAAEL,GAClBK,IAEJ,KAAMC,GAAGL,GACLH,EAAeY,KAAK,CAACJ,EAAEA,IACvBR,EAAeY,KAAK,CAACJ,EAAEA,IACvBR,EAAeY,KAAK,CAACD,EAAED,EAAMF,EAAEJ,EAAI,KACnCL,EAAMY,KAAKD,EAAMF,EAAEJ,EAAI,GACvBI,IAhDJK,CAAMb,EAAeD,EAAMG,EAASE,EAAID,GAXxCF,CAAcD,EAHMD,EAGqB,EAF7BA,EAAMe,OAE6B,GAExCd,ECuGIe,M,kDAhHX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACTC,aAAc,IACdnB,MAAO,IALG,E,gEAadoB,KAAKC,e,mCAOL,IAFA,IAyFWC,EAAIC,EAzFTJ,EAAeC,KAAKF,MAAMC,aAC1BnB,EAAM,GACJQ,EAAE,EAAEA,EAAEW,EAAaX,IACvBR,EAAMa,MAsFCS,EAtFc,EAsFVC,EAtFY,IAuFxBjB,KAAKC,MAAMD,KAAKkB,UAAUD,EAAID,EAAI,GAAGA,KArFxCF,KAAKK,SAAS,CAACzB,MAAOA,M,kCAId0B,GACRC,QAAQC,IAAIF,EAAEG,OAAOC,OACrBV,KAAKK,SAAS,CAACN,aAAcO,EAAEG,OAAOC,U,kCAatC,IANA,IAAMC,EAAiBC,OAAOC,YAAa,KAGrChC,EAAiBF,EAAkBqB,KAAKF,MAAMlB,OAE9CkC,EAAYC,SAASC,uBAAuB,aAP3C,WAQC5B,GARD,kBAUqBP,EAAeO,GAVpC,GAUI6B,EAVJ,KAUWC,EAVX,KAYA9B,EAAE,GAAG,EACJ+B,YAAW,WACPL,EAAUG,GAAQG,MAAMC,gBAAkB,MAC1CP,EAAUI,GAAQE,MAAMC,gBAAkB,QACzC,EAAFjC,GAECA,EAAE,GAAG,EACT+B,YAAW,WACPL,EAAUG,GAAQG,MAAMC,gBAAkB,OAC1CP,EAAUI,GAAQE,MAAMC,gBAAkB,SACzC,EAAFjC,GAGH+B,YAAW,WACPL,EAAUG,GAAQG,MAAME,OAAxB,UAAoCJ,EAAOP,EAA3C,QACC,EAAFvB,IAnBHA,EAAE,EAAEA,EAAEP,EAAec,OAAOP,IAAK,EAAjCA,K,8IAiCF,IAAD,OACER,EAAOoB,KAAKF,MAAZlB,MACAmB,EAAgBC,KAAKF,MAArBC,aACDwB,GAAiBX,OAAOY,WAAW,KAAKzB,EAAc,EACtDY,EAAiBC,OAAOC,YAAa,KAE3C,OACI,yBAAKY,UAAU,kBAAkBL,MAC7B,CAACM,UAAU,GAAD,OAAKd,OAAOC,YAAZ,QAGTjC,EAAM+C,KAAI,SAACjB,EAAMkB,GAAP,OACP,yBAAKH,UAAU,YAAYI,IAAKD,EAAKR,MACjC,CAACU,MAAM,GAAD,OAAIP,EAAJ,MAAqBD,OAAO,GAAD,OAAIZ,EAAMC,EAAV,YAGzC,4BAAKX,KAAKF,MAAMC,cAChB,0BAAMgC,SAAU,SAAAC,GAAK,OAAI,EAAKC,YAAYD,EAAMvB,OAAOC,SACnD,2BAAOwB,KAAK,OAAOC,YAAanC,KAAKF,MAAMC,eAC3C,4BAAQmC,KAAK,UAAb,UAEJ,4BAAQE,QAAS,kBAAO,EAAKnC,eAA7B,eACA,4BAAQmC,QAAS,kBAAO,EAAKC,cAA7B,cACA,4BAAQD,QAAS,kBAAO,EAAKE,cAA7B,cACA,4BAAQF,QAAS,kBAAO,EAAKG,aAA7B,aACA,4BAAQH,QAAS,kBAAO,EAAKI,eAA7B,oB,GArGgBC,IAAMC,WCQvBC,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCKcmB,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnC,SAASoC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.7bd8c07b.chunk.js","sourcesContent":["\n\n// export function GetAnimationArray(array){\n//     const animation =[];\n//     if(array.length()<=1)   return array;\n// }\n\nexport default function GetAnimationArray(array){\n    const animationArray = [];\n    const sortedArray = array;\n    const len = array.length;\n    // console.log(sortedArray);\n    MergeSortAlgo(animationArray,sortedArray,0,len-1);\n    // console.log(sortedArray);\n    return animationArray;\n}\n\nfunction MergeSortAlgo(animationArray,array,startInd,endInd){\n    if(endInd<=startInd)   return;\n    const mid =Math.floor((endInd-startInd)/2)+startInd;\n    MergeSortAlgo(animationArray,array,startInd,mid);\n    MergeSortAlgo(animationArray,array,mid+1,endInd);\n    // console.log(\" array \",array);\n    Merge(animationArray,array,startInd,mid,endInd);\n}\n\nfunction Merge(animationArray,array,startInd,mid,endInd){\n    let i=startInd;\n    let j=mid+1;\n    const left = [];\n    const right = [];\n    let k=0;\n    for(k=startInd;k<=mid;k++){\n        // console.log(startInd,k);\n        left.push(array[k]);\n    }\n    for(k=mid+1;k<=endInd;k++){\n        right.push(array[k]);\n    }\n    // console.log(left.length,right.length);\n    k=startInd;\n    while(i <= mid && j <= endInd){\n        // console.log(i,j);\n        if(left[i-startInd] <= right[j-mid-1]){\n            animationArray.push([i,j]);\n            animationArray.push([i,j]);\n            animationArray.push([k,left[i-startInd]]);\n            array[k++]=left[i-startInd];\n            i++;\n        }\n        else{\n            animationArray.push([i,j]);\n            animationArray.push([i,j]);\n            animationArray.push([k,right[j-mid-1]]);\n            array[k++]=right[j-mid-1];\n            j++;\n        }\n    }\n    while(i<=mid){\n        animationArray.push([i,i]);\n        animationArray.push([i,i]);\n\n        animationArray.push([k,left[i-startInd]]);\n        array[k++]=left[i-startInd];\n        i++;\n    }\n    while(j<=endInd){\n        animationArray.push([j,j]);\n        animationArray.push([j,j]);\n        animationArray.push([k,right[j-mid-1]]);\n        array[k++]=right[j-mid-1];\n        j++;\n    }\n\n}\n\n","import React from 'react';\nimport './Sortingvisualizer.css';\nimport GetAnimationArray from './algorithms/MergeSortAlgo.js';\n\nclass Sortingvisualizer extends React.Component{\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            array_length: 200,\n            array: []\n        };\n        // this.setArrayLen = this.setArrayLen.bind(this);\n    }\n\n    componentDidMount(){\n        // this.setState({array_length: 200});\n        // console.log(\"mount\");\n        this.resetArray();\n    }\n\n\n    resetArray(){\n        const array_length = this.state.array_length;\n        const array=[];\n        for(let i=0;i<array_length;i++){\n            array.push(randomInt(5,1000));\n        }\n        this.setState({array: array});\n    }\n\n    \n    setArrayLen(e) {\n        console.log(e.target.value);\n        this.setState({array_length: e.target.value});\n           \n        // this.state.array_length=event.target.value;\n    }\n    \n    MergeSort(){\n        // console.log(\"h\");\n        const height_of_bar = (window.innerHeight)/1100;\n\n        // console.log(this.state.array);\n        const animationArray = GetAnimationArray(this.state.array);\n        // console.log(animationArray);\n        const arrayBars = document.getElementsByClassName('array-bar');\n        for(let i=0;i<animationArray.length;i++){\n            \n            const [barone,bartwo] = animationArray[i];\n            \n            if(i%3==0){\n                setTimeout(() => {\n                    arrayBars[barone].style.backgroundColor = 'red';\n                    arrayBars[bartwo].style.backgroundColor = 'red';\n                }, i*1);\n            }\n            else if(i%3==1){\n                setTimeout(() => {\n                    arrayBars[barone].style.backgroundColor = 'blue';\n                    arrayBars[bartwo].style.backgroundColor = 'blue';\n                }, i*1);\n            }\n            else{\n                setTimeout(() => {\n                    arrayBars[barone].style.height = `${bartwo*height_of_bar}px`;\n                }, i*1);    // console.log(\"j\",typeof(baronestyle.height),typeof(height_of_bartwo),bartwostyle.height,`${height_of_barone}`);\n                \n                    // console.log(\"j\");\n                    // this.state.array[barone] = actual_array_bar_height_two;\n                    // this.state.array[bartwo] = actual_array_bar_height_one;\n                \n            }\n        }\n        // console.log(this.state.array);\n    }\n    QuickSort(){}\n    HeapSort(){}\n    BubbleSort(){}   \n\n    render() {\n        const {array}=this.state;\n        const {array_length} = this.state;\n        const width_of_bar = ((window.innerWidth-120)/array_length)-2;\n        const height_of_bar = (window.innerHeight)/1100; \n\n        return (            \n            <div className=\"array-container\" style={\n                {minHeight: `${window.innerHeight}px`}\n            }>\n                {/* <input type=\"text\" placeholder=\"length_of_array\" > </input> */}\n                {array.map((value,idx) => (\n                    <div className=\"array-bar\" key={idx} style={\n                        {width:`${width_of_bar}px`,height:`${value*height_of_bar}px`}\n                    }></div>\n                ))}\n                <h1>{this.state.array_length}</h1>\n                <form onSubmit={event => this.setArrayLen(event.target.value)}>\n                    <input type='text' placeholder={this.state.array_length} />\n                    <button type=\"submit\">enter</button>\n                </form>\n                <button onClick={() => (this.resetArray())}>Reset Array</button>\n                <button onClick={() => (this.MergeSort())}>merge sort</button>\n                <button onClick={() => (this.QuickSort())}>quick sort</button>\n                <button onClick={() => (this.HeapSort())}>heap sort</button>\n                <button onClick={() => (this.BubbleSort())}>bubble sort</button>\n            </div>\n        );\n    }\n\n}\n\nfunction randomInt(min,max){\n    return Math.floor(Math.random()*(max-min+1)+min);\n}\n\n\nexport default Sortingvisualizer;","import React from 'react';\nimport './App.css';\nimport Sortingvisualizer from './components/Sortingvisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sortingvisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}